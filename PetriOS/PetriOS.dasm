; Petri (OS)
; by srjek

;Calls should be jsr <api_call>
;First 32 words (First line) of screen is reserved for OS use (notifications)
;Register J is an OS register, it needs to appear unaltered to the next api call (J is needed by sleep, fork, quit)
;Register Z is used by fork, notify. Put PUSH, POP statements around these calls if needed
;sleep switches programs, so any register may be modified "during its execution" so to speak

;App Header/API -------------------------------
;sleep:                                  ;SLEEP: this makes multi-tasking work. Call it so this OS can work.
.define sleep -1
            ;Performance Sensitive (5 cycles, 5 words) (Linked list, 3x as large as Memory Sensitive)
            ;set [j], SP                 ;J=-(current program number) aka [J] = current program stack address
            ;set j, [j+1]
            set PC, boot    ;this 2word instruction (and 1word dat) is replaced by the bootloader (look at label sleep0)
            set SP, [j]
            jmp POP
;;            ;Memory Sensitive (9 cycles, 7 words) (The data structure storing stack pointers is minimal)
;;            set [j], SP                 ;J=-(current program number) aka [J] = current program stack address
;;            sub j, 1
;;            ife j, [program_count]
;;                set j, 0
;;            set SP, [j]
;;            set PC, POP
malloc:                                 ;MALLOC: Requests a bytes of memory, address returned in a. If a == 0, malloc failed.
            jmp unimplemented
free:                                   ;FREE: Frees memory previously malloc-ed at a
            jmp unimplemented
notify:                                 ;NOTIFY: Shows one-line notification [a] to user, useful when the user is looking at another screen
            set z, 0
_loop:
            set [notifyScreen+z], [notifyScreen+0x20+z]
            add z, 1
            ifg 0x20*10, z
                jmp _loop
            set z, 0
            set [_loop2+1], a
_loop2:
            set [notifyScreen+(0x20*10)+z], [0x0+z]
            add z, 1
            ifg 0x20, z
                jmp _loop2
            ifn [notifyScreenId], [curScreenId]
                jmp POP
            set z, 0
            set [_loop3+2], [screen_start]
_loop3:
            set [0x0+z], [notifyScreen+z]
            add z, 1
            ifg 0x20*11, z
                jmp _loop3
            jmp POP
fork:                                   ;FORK: Add a thread with the current stack to the system (uses z) (sys: j)
                                        ;   Put execution address into a
            ;(25 cycles, 16 words)      ;   This won't actually execute, so you will be able to recover your stack before registers are lost
            set PUSH, a
            set a, SP
            set SP, [programLL_stack_pointer] ;Acquire space for item in linked list
            set z, POP
            set [programLL_stack_pointer], SP
            set SP, a
            set [z], SP         ;Update item in linked list
            set a, j            ;Insert item into linked list (j->f) to (j->z->f)
            add a, 1
            set [z-1], a            ;z< = j>
            set [z+1], [j+1]        ;z> = f
            set [j+1], z            ;j> = z
            add z, 1
            set a, [z]
            sub a, 1
            set [a], z              ;f< = z>
            set a, POP      ;ignore forked program's address
            jmp POP
quit:                                   ;QUIT: program is considered aborted, this function will not return
            ;(14 cycles, 14 words)      ;stack and mem should be freed by program first, this will be ok as long as no api calls are made after (besides quit, free)
            set a, PEEK
            set SP, [programLL_stack_pointer]   ;add freed memory to stack (SP can be discarded, should have been previously freed)
            set PUSH, j
            set i, [j+1]        ;Remove item from linked list (p->j->f) to (p->f)
            set j, [j-1]
            set [j], i        ;p> = f
            set [i-1], j        ;f< = p>
            set j, PEEK
            set [programLL_stack_pointer], SP
            jmp sleep       ;Move to next program
screen_start:
            dat 0x8020
screen_width:
            dat 32
screen_height:
            dat 11
curScreenId:
            dat 0
lastScreenId:
            dat 1
main:
;End App Header/API ---------------------------
            jmp boot

:programLL_stack_pointer        ;pointer to stack of free memory, each piece 3 words wide(for the linked list of stack pointers)
            dat 0
;----------------API------------------
mallocTmpDat:
            dat 0x0000
mallocTmp:
            set a, POP
            sub [mallocTmpDat], 0x0400
            set SP, [mallocTmpDat]
            jmp a

;--------------Notify-----------------
notify_bgprog:
            set a, _defaultNotify
            set b, 0x8000
            set c, 32
            jsr copystrlen
            set PUSH, 0
_loop:
            set a, POP
            add a, 1
            ife a, 0x10
                set a, 0
            set PUSH, a
            shr a, 2
            set [0x801F], [_timer+a]
            set PUSH, _loop
            ifn [notifyScreenId], [curScreenId]
                jmp sleep
            ifn [curScreenId], [lastScreenId]
                jmp sleep
            set a, 0
            set [_screenLoop+2], [screen_start]
_screenLoop:
            set [0x8020+a], [notifyScreen+a]
            add a, 1
            ifg 0x0160, a  ;start of 12th line (there is none in our buffer)
                jmp _screenLoop
            set [lastScreenId], [notifyScreenId]
            jmp sleep
_timer:
            dat "-\\|/"|0xF100, 0
_defaultNotify:
            dat "!"|0xF180,"           PetriOS            ."|0xF100
notifyScreen:
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
            dat "                                "|0xF100
notifyScreenId:
            dat 0
            
 

;---------------Boot------------------
bootmsg:
            dat "Booting PetriOS...              "|0xF100
monitormsg:
            dat "    Looking for monitor...      "|0xF100
successmsg:
            dat "                         Success"|0xF100
noMonitor:
            SET A, _msg
            JMP PANIC
_msg:
            dat "KERNEL PANIC! No Monitor!"|0xF100, 0
:boot
            set a, bootmsg
            jsr notify
            
            
            set a, monitormsg
            jsr notify
            
            SET Z, 0
            HWN I
_loop:
            IFE I, 0
                JMP noMonitor
            SUB I, 1
            HWQ I
            IFE A, 0xF615
                IFE B, 0x7349
                    SET Z, I
            IFE Z, 0
                JMP _loop
            
            set b, 0x8000
            set a, 0
            hwi z
            
            set a, successmsg
            jsr notify
            
            set SP, 0x0000          ;prepare stack of pointers to linked list items (linked list holds stack pointers)
            set i, 0
:boot_loop
            set PUSH, 0
            add i, 1
            ifg 49, i               ;max of 50 programs (one extra, thanks to the method used to jumpstart the multitasking)
                jmp boot_loop
            set a, SP
            sub a, 3
            set SP, 0x000
            set i, 0
:boot_loop2
            set PUSH, a
            sub a, 3
            add i, 1
            ifg 49, i
                jmp boot_loop2
            set [programLL_stack_pointer], SP
            
            ;set i, 0
            ;add i, 1
            ;ifg 0x2000, i
            ;    sub PC, 4
            set j, jumpstart    ;Hook up the jumper cables
            set SP, 0x8000
            
            ;Fork special OS processes
            jsr mallocTmp       ;malloc Stack
            set a, notify_bgprog
            jsr fork            ;fork notify bg process
            
            set a, startmsg
            jsr notify
            
            set [sleep], [sleep0]   ;enable sleep (and forever forfeit the bootloader code)
            set [sleep+1], [sleep0+1]
            set [sleep+2], [sleep0+2]
            jsr quit        ;LETS JUMPSTART THIS THING! (uses the label jumpstart as the inital pointer into the linkedlist)

:startmsg
            dat "Starting Process Loop...        "|0xF100
:sleep0     set [j], SP
            set j, [j+1]
            
            dat jumpstart+1
:jumpstart  dat 0
            dat jumpstart
            
            set a, NoOS
            jmp PANIC
:NoOS       dat "BAKA!                           THIS CODE DOESN'T DO ANYTHING!"|0xF100, 0

;------------Screen helpers---------------
:clr_screen
            SET I, 0
_loop:
            STI [0x8000+I], 0
            IFN I, 32*12
                JMP _loop
            jmp POP
            
:copystrlen             ;Copies a string from a to b of length c, clobbers a
            set [copystrlen_config+1], a
            set [copystrlen_config+2], b
            set a, 0
:copystrlen_nextchar
            ife a, c
                jmp POP
:copystrlen_config
            set [0x8000+a], [NoOS+a]
            add a, 1
            jmp copystrlen_nextchar

;----------------PANIC--------------------
:unimplemented
            set a, unimplemented_str
            jmp PANIC
:PANIC
            jsr clr_screen
            set b, 0x8000                   ; Init loop counter
:PANIC_nextchar
            ife [a], 0                      ; If the character is 0 ..
                jmp end                 ; .. jump to the end
            set [b], [a]                    ; Video ram starts at 0x8000, copy char there
            add a, 1                        ; Increase loop counter
            add b, 1
            jmp PANIC_nextchar          ; Loop
            
:end        jmp end
:unimplemented_str
            dat "KERNEL PANIC!                   API CALL UNIMPLEMENTED!"|0xF100, 0




.echo hex($)+" words used for boot"
.if ($/512)<=512
    .echo str($/512)+" sector will need to be loaded before OS can run (~"+str(($/512)*(1000/60))+" ms)"
.else
    .echo str($/512)+" sectors will need to be loaded before OS can run (~"+str(($/512)*(1000/60))+" ms)"
.end


            
;----------------TEST_PROGRAM------------------
:test1
            set z, POP              ;We don't need to know the calling program
            set z, POP
            set a, 0
            set [test1_config+1], [screen_start]
:test1_start
            set PUSH, a
            set i, 0                             ; Init loop counter, for clarity
:test1_loop_out
            set PUSH, z
            set b, 0
:test1_loop_in
            add b, 1
            ifg 0x0100, b
                jmp test1_loop_in
            set PUSH, i
            jsr sleep
            set i, POP
            add i, 1
            set z, POP
            ifg z, i
                jmp test1_loop_out
            set a, POP
            add a, 1
            ifg a, 9
                set a, 0
            set b, 0x30|0xF100
            add b, a
            set y, POP
:test1_config
            set [0x8000+y], b
            set PUSH, y
            jmp test1_start
            jsr quit
            sub PC, 1

;----------------TEST_PROGRAM------------------
:test2
            set a, POP      ;Fetch the calling program
            set i, 0
:test2_nextchar
            set PUSH, a
            set PUSH, i
            jsr sleep
            set i, POP
            set a, POP
            set [test2_configin+1], PEEK
:test2_configin
            ife [test2_data+i], 0                      ; If the character is 0 ..
                jmp test2_end                      ; .. jump to the end
            set [test2_config+1], POP
            set [test2_config+2], PEEK
            set PUSH, [test2_config+1]
:test2_config
            set [0x8020+i], [test2_data+i]             ; Video ram starts at 0x8000, copy char there
            add i, 1                             ; Increase loop counter
            jmp test2_nextchar                     ; Loop

:test2_end
            ifg a, jumpstart
                jsr quit
            set a, POP      ;Give the new program our stack, because we aren't using it anymore
            set a, POP
            set a, [screen_width]
            div a, 2
            mul a, 7        ;3 lines and a half
            add a, [screen_start]
            set PUSH, a
            set a, listTasks
            jsr fork
            jsr quit
            sub PC, 1
:test2_data
            dat "FOO", 0
            
            
;----------------TASK_LIST------------------
:listTasks
            set i, POP              ;We don't need to know the calling program
            set b, POP
            set x, 0
            set y, output
            set i, j
            set i, [i+1]
:listTasks_loop
            set z, 0x20
            mul z, x
            add z, b
            set c, SP
            jsr mallocTmp       ;malloc Stack
            set PUSH, z
            set PUSH, y
            set a, test2
            jsr fork            ;fork test2
            set SP, c
            
            set PUSH, x
            set PUSH, i
            set PUSH, j
            set j, [i]
            set j, [j]
            jsr printHex
            set j, POP
            set i, POP
            set x, POP
            
            set i, [i+1]
            add x, 1
            ifn j, i
                jmp listTasks_loop
            jsr quit
            
:printHex
            set i, 0
            add y, 3
:printHex_loop
            set a, j
            jsr printHexChar
            SHR j, 4
            add i, 1
            ifl i, 4
                jmp printHex_loop
            add y, 5
            set [y], 0
            add y, 1
            jmp POP
:printHexChar
            and a, 0xF
            ifg a, 9
                add a, 0x07
            add a, 0x30|0xF100
            set [y], a
            sub y, 1
            jmp POP
:output
            dat "1234567890", "1234567890", "1234567890", "1234567890", "1234567890", "1234567890", 0


;----------------------COLOR CYCLE TEST-------------------
:color
            set b, 0
:color_inner
            set a, 3
            hwi 3
            set PUSH, b
            set a, 0
:color_sleep
            set PUSH, a
            jsr sleep
            set a, POP
            add a, 1
            ifl a, 32
                jmp color_sleep
            set b, POP
            add b, 1
            ifg b, 15
                set b, 0
            jmp color_inner
            