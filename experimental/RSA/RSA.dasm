init:
    HWN I
.loop:
    SUB I, 1
    HWQ I
    IFE A, 0xF615
        IFE B, 0x7349
            SET [LEM1802], I
    IFN I, 0
        SET PC, .loop
    SET A, 0
    SET B, 0x8000
    HWI [LEM1802]
    
    JSR multiply_test
    
    SET A, dataStart
    SET B, private
    JSR RSA
    JMP end

LEM1802:
    DAT 0xFFFF

dataStart:
    DAT 4, 0x4242, 0x4242, 0x4242, 0x4242
    
;Inputs
;   [A] - number to print, stored in ram as <num of words>, <number in little endian>
;    B  - Location to store result in
;Ouputs
;    A  - same
;   [B] - ASCII string representing number [A] in hex
printHex:
    SET PUSH, B
    SET C, A
    ADD C, [C]
.loop:
    SET X, [C]
    JSR .printWord
    SUB C, 1
    IFN A, C
        JMP .loop
    SET B, POP
    SET PC, POP
.printWord:
    SET Z, 0
    ADD B, 3
.wordLoop:
    SET Y, X
    SHR Y, Z
    AND Y, 0xF
    IFG Y, 0x9
        ADD Y, 'A'-'0'-10
    ADD Y, '0'
    BOR Y, 0xF000
    SET [B], Y
    SUB B, 1
    ADD Z, 4
    IFN Z, 4*4
        JMP .wordLoop
    ADD B, 5
    SET PC, POP
    
multiply_test:
    SET A, .ALPHA
    SET B, 0x8000
    JSR printHex
    SET A, .BETA
    SET B, 0x8020
    JSR printHex
    
    SET A, .ALPHA
    SET B, .BETA
    SET C, .RESULT
    JSR multiply
    
    SET A, .RESULT
    SET B, 0x8040
    JSR printHex
    SET PC, POP

.ALPHA:
    DAT 3, 0xFFFF, 0xFFFF, 0xFFFF
.BETA:
    DAT 3, 0xFFFF, 0xFFFF, 0xFFFF
.RESULT:
    DAT 0, 0, 0, 0
    DAT 0, 0, 0

;Inputs
;   [A] - first number, stored in ram as <num of words>, <number in little endian>
;   [B] - second number, stored same as A
;    C  - Location to store result in, at least len(A)+len(B)+1 words large (extra word is to hold the size)
;Outputs
;    A  - same
;    B  - same
;   [C] - resulting number, stored same as A
;Notes
;   A should be the shorter number, as this will mimimize exiting out of the tighter loop
multiply:
;    for (int i = 0; i < len(A); i++) {
;        //multiply B by A and add to C[i:]
;    }
    SET X, A
    ADD A, [A]
    SET PUSH, A
    SET PUSH, B
    SET PUSH, X ;Actually original A (input)
    ADD B, [B]
    
    SET J, C
    SET I, [SP+1]
    .initLoop:
        STI [J], 0
        IFN B, I
           JMP .initLoop
    SET [J], 0 
                
    .outerloop:
        SET I, [SP+1]
        SET J, C
        ADD J, X
        SUB J, [SP]
        ADD X, 1
        SET Z, 0
        .innerloop:
            STI A, Z
            SET Y, [X]
            MUL Y, [I]
            SET Z, EX
            ADD Y, A
            ADD Z, EX
            ADD [J], Y
            ADD Z, EX
            
            IFN I, B
                JMP .innerloop
        
        SET [J+1], Z
        IFN X, [SP+2]
            JMP .outerloop
    SUB J, C
    ADD J, 1
    SET [C], J
    SET A, POP
    SET B, POP
    SET EX, POP
    SET PC, POP

;Inputs
;   [A] - number, stored in ram as <num of words>, <number in little endian>
;   [B] - key (not modulus)
;Outputs
;    A  - same
;    B  - same
;   [C] - resulting number, stored same as A
RSA:
    SET PUSH, A
    SET PUSH, B
    SET PUSH, 0xFFFF
    
    SET B, A
.loop:
    ADD [SP], 1
    SET C, data1
    JSR multiply
    
    IFE [SP], [SP+1]
        JMP .exitloop
    
    ADD [SP], 1
    SET B, data1
    SET C, data2
    JSR multiply
    
    SET B, data2
    IFN [SP], [SP+1]
        JMP .loop
    
.exitloop:
    SET B, POP
    SET B, POP
    SET A, POP
    SET PC, POP
    
end:
    JMP end

modulus:
    DAT (.end-.start)
.start:
    DAT 0xba6e, 0x7ac4, 0x573b, 0x9e10, 0x51b5, 0xb3a2, 0x2764, 0x37c4
    DAT 0xec16, 0x16ea, 0x111c, 0x05f2, 0xfd70, 0x4e08, 0x0f8f, 0x38ae
    DAT 0x09de, 0xc4df, 0x37bd, 0x5de3, 0x0059, 0xaffa, 0x2039, 0xdf3f
    DAT 0x2148, 0x63d4, 0x23a9, 0xf996, 0x1221, 0xf2a9, 0xa038, 0x1b1c
    DAT 0x6262, 0x9f49, 0x9fa7, 0x3af4, 0x59f1, 0x33f2, 0x6700, 0xa42f
    DAT 0x9794, 0x51f3, 0x624c, 0x3688, 0x61db, 0xcf43, 0xe45e, 0x5992
    DAT 0xe85e, 0xe732, 0xc01c, 0xbffb, 0x98bf, 0x2d72, 0x86fc, 0x9086
    DAT 0x1958, 0x5175, 0xec99, 0x1b8b, 0x886f, 0xae53, 0xb43b, 0xe341
    DAT 0x03f7, 0x5aa1, 0x62cf, 0x4f96, 0xb681, 0x1a97, 0x5488, 0xe45f
    DAT 0xca13, 0x8575, 0xedb2, 0x2013, 0x94fc, 0x51ce, 0xd3ed, 0x1043
    DAT 0x48a4, 0xdaf8, 0xf404, 0xa6ff, 0x2b43, 0xe894, 0x5ad2, 0x34f8
    DAT 0x15f0, 0x20d8, 0x788e, 0xee39, 0xe365, 0x5a80, 0x348b, 0xe52f
    DAT 0xaee2, 0x3256, 0x3bbd, 0xfc8a, 0x8122, 0x97d0, 0xbacc, 0x26b8
    DAT 0x2de9, 0x3bae, 0xc8c8, 0xcd93, 0xfb76, 0xd36f, 0xccb6, 0xf4f6
    DAT 0xf763, 0x5a85, 0x06ce, 0xcf75, 0x1ee8, 0xbd30, 0x8fb0, 0x0ffa
    DAT 0x8f3c, 0xa1a4, 0x9068, 0x7283, 0x99d3, 0x604b, 0x446b, 0xdbea
    DAT 0xf0ae, 0x9674, 0x28c2, 0x9d50, 0x003e, 0xd5df, 0x5473, 0xf3fd
    DAT 0x929f, 0xef9c, 0x404d, 0x291c, 0xa11a, 0x8da2, 0x4c5e, 0xa5ed
    DAT 0x467b, 0xc366, 0xe855, 0x01e2, 0x607f, 0x323c, 0xe476, 0x5909
    DAT 0x6dff, 0xbb09, 0x2f79, 0xe200, 0x2f18, 0x3f6e, 0x1dc4, 0xfe2e
    DAT 0xd9b6, 0x5cab, 0x8cc2, 0xb9ca, 0x0c8b, 0x8330, 0x351f, 0xcefd
    DAT 0xa05a, 0x6162, 0x7feb, 0xe094, 0x0e30, 0xf205, 0xb9ce, 0x33f8
    DAT 0xe84c, 0x83c5, 0x08c0, 0x8cf7, 0x6665, 0x1b07, 0x85c0, 0x5f7b
    DAT 0x3dcc, 0xf8eb, 0x2a00, 0xfee8, 0xfff3, 0x5818, 0x9ca0, 0x6fa2
    DAT 0x1534, 0xfc78, 0x0922, 0xc46a, 0x0b19, 0x369f, 0xfc85, 0x3946
    DAT 0x9037, 0xb5f4, 0x3e24, 0x4591, 0x78be, 0x0b39, 0xfe8e, 0x87e1
    DAT 0x6fff, 0xc3c5, 0xd091, 0x743f, 0x6f9d, 0xa926, 0x4b2b, 0xff56
    DAT 0xcd65, 0xcf22, 0xeae4, 0x5b50, 0xe69b, 0x3cd8, 0x5115, 0x8265
    DAT 0x521a, 0x668f, 0x0fcc, 0x96f5, 0x8bad, 0x8366, 0x8548, 0x45a9
    DAT 0x4ab5, 0x5ac7, 0x98f1, 0xba79, 0x9d26, 0xf956, 0xdf02, 0xad74
    DAT 0x2c3a, 0xaf7d, 0x2095, 0x220a, 0x79a9, 0x96f5, 0x5408, 0x68dd
    DAT 0xd27c, 0x399a, 0x56d5, 0xc05e, 0xe5da, 0x27b1, 0x7414, 0x7b37
.end:

public:
    DAT 2
    DAT 0x1, 0x0001     ;65537

private:
    DAT (.end-.start)
.start:
    DAT 0x220e, 0x7496, 0xd168, 0xaea3, 0x4489, 0xf0da, 0xba5f, 0x7060
    DAT 0xa4d0, 0x1437, 0x8610, 0x9c75, 0x9b1e, 0x9ce2, 0x9415, 0x11c1
    DAT 0x9943, 0xfcaa, 0xda3f, 0xd99a, 0xd241, 0x9008, 0x1d42, 0xf529
    DAT 0x4f27, 0x2e35, 0x5e9e, 0x7a5d, 0x93ca, 0x67cd, 0xdcda, 0xe2f8
    DAT 0xf870, 0x13b1, 0x1b5d, 0x2d43, 0xddfa, 0x5606, 0xfe11, 0xfbec
    DAT 0x45c0, 0x6e88, 0x0b78, 0xe8ad, 0x5953, 0x1235, 0xd0cd, 0xfb86
    DAT 0xfeb3, 0xf780, 0x29e0, 0x16a2, 0x1b71, 0x3118, 0x2ed8, 0x8c7e
    DAT 0x32bb, 0x1386, 0x7b46, 0x2ce5, 0xfc72, 0x8a61, 0xf816, 0xc898
    DAT 0xe3e4, 0x97c5, 0xcb8b, 0x1b7a, 0xe8b4, 0x04eb, 0x8821, 0xc9b6
    DAT 0x45ef, 0xf2fd, 0x6c02, 0x9221, 0x81a1, 0xe63f, 0xe62e, 0xf43d
    DAT 0x9653, 0xa73c, 0xbb36, 0xee5a, 0xc6c8, 0x8d00, 0x2ce7, 0x218e
    DAT 0x0053, 0xf16c, 0x19f9, 0xe242, 0xe8eb, 0x66f0, 0xeca8, 0x71a1
    DAT 0x984c, 0xf1ed, 0x16d4, 0xca01, 0x733d, 0xa286, 0x1ad9, 0x9869
    DAT 0x24d9, 0xea71, 0x2f74, 0x9f39, 0x5d42, 0x83b5, 0x74ac, 0x276b
    DAT 0xc61d, 0x7c37, 0xb8da, 0xa6c3, 0x3a76, 0x41b9, 0x5146, 0x5464
    DAT 0xed2d, 0xa249, 0xb1a7, 0xa2e3, 0xaf82, 0x11a1, 0x2e4a, 0x95cd
    DAT 0xb14a, 0xf237, 0x65eb, 0x4634, 0x4b27, 0x1cbe, 0x243e, 0x241d
    DAT 0x7198, 0xf43d, 0xf5ee, 0xd3d4, 0xcafe, 0xbbc6, 0xb9c5, 0x8ee0
    DAT 0xed27, 0x06e7, 0xf4cb, 0x8579, 0x26f7, 0x654e, 0x10a1, 0xa6c2
    DAT 0xdfb7, 0xe64f, 0xfcd2, 0xa6ab, 0xdb62, 0x6a11, 0x0ceb, 0xf6c3
    DAT 0xd9fe, 0xa626, 0x9878, 0x6355, 0xcaa5, 0xae8a, 0xe90c, 0x0966
    DAT 0x0a99, 0xc4b6, 0xed40, 0x7177, 0x929a, 0x8483, 0x1edc, 0x4356
    DAT 0x8cd6, 0xeef0, 0x73f9, 0x2600, 0x7cb3, 0x05ff, 0xc46c, 0xe14e
    DAT 0xbb41, 0xad19, 0x2889, 0x960d, 0x8940, 0x8257, 0x924e, 0x3e5b
    DAT 0x3c11, 0xba80, 0x1700, 0xd152, 0xf188, 0x827f, 0xc59e, 0xb167
    DAT 0x7284, 0xb362, 0x0915, 0xac60, 0x24d6, 0xbd1b, 0x5850, 0x1684
    DAT 0x371b, 0x4616, 0xadce, 0xbfb6, 0xea31, 0xae09, 0x9948, 0xd91e
    DAT 0x8fa9, 0x2ec2, 0xf2c0, 0xc00d, 0xb0ab, 0xede5, 0x5d71, 0x9faa
    DAT 0xb560, 0x68bc, 0x9eaf, 0x5ad1, 0xbaf1, 0xb977, 0x36ce, 0x0a23
    DAT 0x8e57, 0x4fbf, 0x1b36, 0xc2e3, 0x57f1, 0xd238, 0x7ebd, 0x94ad
    DAT 0xe1d5, 0x3b7f, 0xa478, 0xfab7, 0x3066, 0x3dfb, 0x4097, 0x9ae1
    DAT 0x8e7a, 0xf4d4, 0x9646, 0xaab1, 0x3cbc, 0x1fba, 0x2793, 0xc881
.end:
data1:
.reserve 1024
data2:
.reserve 1024
data3:
.reserve 1024
data4:
.reserve 1024
