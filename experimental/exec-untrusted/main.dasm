; A dcpu16 program that rewrites another dcpu16 program, allowing the
; child program to be executed without compromising the system,
; but at a performance and memory cost
;
; Works by first checking for illegal instructions (IAQ, IAS, IAG, HWI, or unrecognized instructions)
;     - To prevent abuse of undocumented instructions, any invalid dcpu16 instructions are considered illegal
; Then the child program is rewritten as follows:
;     - Any instructions that set PC to an unknown value will be replaced with a JSR to bounds-check at runtime
;     - Any instructions that set Ram at an unknown address will be replaced with a JSR to bounds-check at runtime
;     - Any instructions that set PC or Ram will be subject to a bounds check and may be considered an illegal instruction
;     - Any instructions that modify SP will be replaced/emulated, as the actual SP register is used by this program
;     - Using the stack is considered to be accessing Ram at an unknown address
;     - INT calls are considered to be calls to standard functions provided by this program
;         * Any unrecognized std function calls are considered to be illegal instructions
;         * By default, no std function calls are provided, thus all INT instructions will be illegal
;         * INT calls can not use short literals
;     - The last instruction in code space is considered to be the end of the program, and will be replaced with a JSR to ensure this
;     - If this program can not acquire an interrupt handler for a short literal INT
;         * Any 1 words instructions that need replaced will be considered illegal
;
; The child program will NOT be altered to work with cooperative multitasking systems
; (cooperative multitasking is risky, the replaced instruction handler can be altered to coop,
;            and std coop functions could be provided to the child, but nothing will force the child to use them)

; TODO: make sure any changes to PC land on a verified instruction (Note: may have to consider instructions that SET PC to an unknown value to be illegal)
;       example:
;          IN_YOUR_BASE:
;              SET A, <illegal instruction>
;              SET PC, POP
;              <more code>
;              SET PC, IN_YOUR_BASE+1
; TODO: I said above I would only replace instructions that I can't bounds check at program load. Actually do this.
; TODO: Allow (optional?) bounds-checking on ram reads
;               Originally written to allow file system drivers to be loaded from the floppy with the fs in question
;               However, as it currently stands, reading from ram is not bounds checked
;               It would be possible in the described scenerio to dump the ram to disk, potentially exposing private data
; TODO: consider self-modifying code or some other way of using the dcpu16 to execute instructions in the handlers

.include "db.dasm"

short_replace:
    INT 0x1E

init:
    ;This function should be called once, ever (NOT once per program rewritten/loaded)
    ;Register things with the OS here
    SET PC, POP

op_table:   ;0 -- invalid, 1 -- replace, 2 -- valid provided operands are valid
    DAT 2   ;Extended ops
    DAT 2   ;SET
    DAT 2   ;ADD
    DAT 2   ;SUB
    DAT 2   ;MUL
    DAT 2   ;MLI
    DAT 2   ;DIV
    DAT 2   ;DVI
    DAT 2   ;MOD
    DAT 2   ;MDI
    DAT 2   ;AND
    DAT 2   ;BOR
    DAT 2   ;XOR
    DAT 2   ;SHR
    DAT 2   ;ASR
    DAT 2   ;SHL
    DAT 2   ;IFB
    DAT 2   ;IFC
    DAT 2   ;IFE
    DAT 2   ;IFN
    DAT 2   ;IFG
    DAT 2   ;IFA
    DAT 2   ;IFL
    DAT 2   ;IFU
    DAT 0
    DAT 0
    DAT 2   ;ADX
    DAT 2   ;SBX
    DAT 0
    DAT 0
    DAT 2   ;STI
    DAT 2   ;STD

ext_op_table:   ;0 -- invalid, 1 -- replace, 2 -- valid provided operands are valid
    DAT 0   ;Reserved
    DAT 1   ;JSR
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 1   ;INT
    DAT 0   ;IAG
    DAT 0   ;IAS
    DAT 1   ;RFI
    DAT 0   ;IAQ
    DAT 0
    DAT 0
    DAT 0
    DAT 0   ;HWN    ;warning, should you chose to allow HWN, HWN sets a, which kinda messes up the operand_table
    DAT 0   ;HWQ
    DAT 0   ;HWI
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0
    DAT 0

operand_table:   ;0 -- replace, 1 -- replace if b (valid as a), 2 -- replace if a (valid as b), 3 -- valid
    DAT 3   ;A
    DAT 3   ;B
    DAT 3   ;C
    DAT 3   ;X
    DAT 3   ;Y
    DAT 3   ;Z
    DAT 3   ;I
    DAT 3   ;J
    DAT 1   ;[A]
    DAT 1   ;[B]
    DAT 1   ;[C]
    DAT 1   ;[X]
    DAT 1   ;[Y]
    DAT 1   ;[Z]
    DAT 1   ;[I]
    DAT 1   ;[J]
    DAT 1   ;[A+x]
    DAT 1   ;[B+x]
    DAT 1   ;[C+x]
    DAT 1   ;[X+x]
    DAT 1   ;[Y+x]
    DAT 1   ;[Z+x]
    DAT 1   ;[I+x]
    DAT 1   ;[J+x]
    DAT 0   ;PUSH/POP   ;SP is emulated (we use the SP register for other things)    
    DAT 0   ;PEEK       ;SP is emulated
    DAT 0   ;PICK       ;SP is emulated
    DAT 0   ;SP         ;SP is emulated
    DAT 1   ;PC
    DAT 3   ;EX
    DAT 1   ;[next word]
    DAT 3   ;next word (literal)
    ;Anything above is a literal(3/valid), code that uses this table should check for literals first

rewrite:
    ;Get address of program
    ;Get length of program
    ;Get length of code
    
    ;Add prog id to database
    SET PUSH, <code_start>  ;TODO   ;[SP-3]
    SET PUSH, <code_end>            ;[SP-2]
    SET PUSH, <data_start>          ;[SP-1]
    SET PUSH, <data_end>            ;[SP]
    JSR add_prog_id     ;Store program in database, and get prog_id
    ADD SP, 4
    IFE A, 0
        JMP insufficent_space
    SET PUSH, A ;Save prog_id in stack, because most future function calls will need it anyways
        
    ;Loop through code
    SET I, [SP-3]
_loop:
        ;Pull out op<x>, b<B> from instruction
        SET X, [I]
        AND X, 0x1F
        SET B, [I]
        SHR B, 5
        AND B, 0x1F
        SET A, [I]
        SHR A, 10
        AND A, 0x3F
        
        ;If op is 0
        IFE X, 0
            JMP _op_0
        JMP _op_not_0
        
        _op_0:
            SET B, [ext_op_table+B]
            IFE B, 0
                JMP illegal_instruction
            ;if last instruction
                JMP _last_instruction
            IFE B, 1
                JMP _replace_instruction
            IFE B, 2
                JMP _continue
            
            JMP illegal_instruction
        
    _op_not_0:
        SET X, [op_table+X]
        IFE X, 0
            JMP illegal_instruction
        ;if last instruction
            JMP _last_instruction
        IFE X, 1
            JMP _replace_instruction
        IFE X, 2
            JMP _continue
        
        JMP illegal_instruction
    
    _last_instruction:
        JSR db_add (args: address of instruction, prog_id, instruction0, instruction1, instruction2)
        ;replace with JSR last_instruction_handler
        JMP _continue
    _replace_instruction:
        ;NOTE: 3 word instructions should be replaced with an extra SET A, A instruction appended to compenstate for size
        JSR db_add (args: address of instruction, prog_id, instruction0, instruction1, instruction2)
        ;replace with JSR dangerous_instruction_handler
_continue:
    JMP _loop
    
    SET PC, POP
    

insufficent_space:
    ;Maybe print different error message
    ;Do the rest of illegal_instruction
illegal_instruction_runtime:
    ;Maybe print different error message
    ;Do the rest of illegal_instruction (maybe?)
    ;Kill the child program.
illegal_instruction:
    ;Maybe print error message
    ;Return error code
    SUB PC, 1

last_instruction_handler:
    ;Get original instruction data
    ;if op is 0
        ;if b is INT
            ;Get a
            ;Lookup std function
            ;Restore state
            ;JSR <std_function>
    ;if b is PC
        ;invoke dangerous_instruction_handler
    ;if b is a stack op
        ;invoke dangerous_instruction_handler
    ;if b is a ram write
        ;invoke dangerous_instruction_handler
    ;if nothing above
        ;exec instruction
    ;abort child program

dangerous_instruction_handler:
    SET PUSH, EX    ;Save state
    SET PUSH, A
    SET PUSH, B
    SET PUSH, C
    SET PUSH, X
    SET PUSH, Y
    SET PUSH, Z
    SET PUSH, I
    SET PUSH, J
    
    ;Get original instruction data
    SET PUSH, [SP+9]    ;Put prog_id on top
    SET PUSH, [SP+11]   ;Put address of next instruction on top
    JSR db_lookup
    
    ;Evaluate B
    SET A, 0xFFFF
    SET B, X
    SHL B, 5
    AND B, 0x1F
    JSR [emu_operand_table+B]
    SET B, A
    
    SET EX, POP ;TODO: This should be up right after the function call that required this.
    SET EX, POP ;However, the spot I gave for operand literals is [SP-10]. I need to make sure A and B don't collide.
    
    ;Evaluate A
    SET A, X
    SHL A, 10
    AND A, 0x3F
    JSR [emu_operand_table+A]
    
    AND X, 0x1F
    JSR [emu_op_table+X]
        
    SET POP, J      ;Restore state
    SET POP, I
    SET POP, Z
    SET POP, Y
    SET POP, X
    SET POP, C
    SET POP, B
    SET POP, A
    SET POP, EX
    
    ;SET PC to next instruction

.define emu_pid_offset 10
.define emu_PC_offset 0 ;TODO: give this a spot in ram
.define emu_SP_offset 0 ;TODO: give this a spot in ram
.define emu_EX_offset 9
.define emu_A_offset 8
.define emu_B_offset 7
.define emu_C_offset 6
.define emu_X_offset 5
.define emu_Y_offset 4
.define emu_Z_offset 3
.define emu_I_offset 2
.define emu_J_offset 1

.define emu_start_offset 1
.define emu_end_offset 6

emu_operand_table:
    DAT emu_reg_A
    DAT emu_reg_B
    DAT emu_reg_C
    DAT emu_reg_X
    DAT emu_reg_Y
    DAT emu_reg_Z
    DAT emu_reg_I
    DAT emu_reg_J
    DAT emu_reg_A_deref
    DAT emu_reg_B_deref
    DAT emu_reg_C_deref
    DAT emu_reg_X_deref
    DAT emu_reg_Y_deref
    DAT emu_reg_Z_deref
    DAT emu_reg_I_deref
    DAT emu_reg_J_deref
    DAT emu_reg_A_offset
    DAT emu_reg_B_offset
    DAT emu_reg_C_offset
    DAT emu_reg_X_offset
    DAT emu_reg_Y_offset
    DAT emu_reg_Z_offset
    DAT emu_reg_I_offset
    DAT emu_reg_J_offset
    DAT emu_POP     ;Can also be PUSH, when A is 0xFFFF
    DAT emu_PEEK
    DAT emu_PICK
    DAT emu_SP
    DAT emu_PC
    DAT emu_EX
    DAT emu_deref
    DAT emu_literal
    DAT emu_literal_FFFF
    DAT emu_literal_00
    DAT emu_literal_01
    DAT emu_literal_02
    DAT emu_literal_03
    DAT emu_literal_04
    DAT emu_literal_05
    DAT emu_literal_06
    DAT emu_literal_07
    DAT emu_literal_08
    DAT emu_literal_09
    DAT emu_literal_0A
    DAT emu_literal_0B
    DAT emu_literal_0C
    DAT emu_literal_0D
    DAT emu_literal_0E
    DAT emu_literal_0F
    DAT emu_literal_10
    DAT emu_literal_11
    DAT emu_literal_12
    DAT emu_literal_13
    DAT emu_literal_14
    DAT emu_literal_15
    DAT emu_literal_16
    DAT emu_literal_17
    DAT emu_literal_18
    DAT emu_literal_19
    DAT emu_literal_1A
    DAT emu_literal_1B
    DAT emu_literal_1C
    DAT emu_literal_1D
    DAT emu_literal_1E
emu_reg_A:
    SET A, SP
    ADD A, emu_A_offset
    SET PC, POP
emu_reg_B:
    SET A, SP
    ADD A, emu_B_offset
    SET PC, POP
emu_reg_C:
    SET A, SP
    ADD A, emu_C_offset
    SET PC, POP
emu_reg_X:
    SET A, SP
    ADD A, emu_X_offset
    SET PC, POP
emu_reg_Y:
    SET A, SP
    ADD A, emu_Y_offset
    SET PC, POP
emu_reg_Z:
    SET A, SP
    ADD A, emu_Z_offset
    SET PC, POP
emu_reg_I:
    SET A, SP
    ADD A, emu_I_offset
    SET PC, POP
emu_reg_J:
    SET A, SP
    ADD A, emu_J_offset
    SET PC, POP
emu_reg_A_deref:
    SET A, [SP+emu_A_offset]
    SET PC, POP
emu_reg_B_deref:
    SET A, [SP+emu_B_offset]
    SET PC, POP
emu_reg_C_deref:
    SET A, [SP+emu_C_offset]
    SET PC, POP
emu_reg_X_deref:
    SET A, [SP+emu_X_offset]
    SET PC, POP
emu_reg_Y_deref:
    SET A, [SP+emu_Y_offset]
    SET PC, POP
emu_reg_Z_deref:
    SET A, [SP+emu_Z_offset]
    SET PC, POP
emu_reg_I_deref:
    SET A, [SP+emu_I_offset]
    SET PC, POP
emu_reg_J_deref:
    SET A, [SP+emu_J_offset]
    SET PC, POP
emu_reg_A_offset:
    SET A, [SP+emu_A_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_B_offset:
    SET A, [SP+emu_B_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_C_offset:
    SET A, [SP+emu_C_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_X_offset:
    SET A, [SP+emu_X_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_Y_offset:
    SET A, [SP+emu_Y_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_Z_offset:
    SET A, [SP+emu_Z_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_I_offset:
    SET A, [SP+emu_I_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_reg_J_offset:
    SET A, [SP+emu_J_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_POP:
    SET PUSH, B
    IFE A, 0xFFFF
        JMP emu_PUSH
    SET B, emu_SP_offset
    SET A, [SP+emu_SP_offset]
    SET PUSH, A
    ADD A, 1
    JSR emu_SET_checkSP
    SET A, POP
    SET B, POP
    SET PC, POP
emu_PUSH:
    SET B, emu_SP_offset
    SET A, [SP+emu_SP_offset]
    SUB A, 1
    JSR emu_SET_checkSP
    SET A, [B]
    SET B, POP
    SET PC, POP
emu_PEEK:
    SET A, [SP+emu_SP_offset]
    SET PC, POP
emu_PICK:
    SET A, [SP+emu_SP_offset]
    ADD A, <uhhh> ;TODO
    SET PC, POP
emu_SP:
    SET A, SP
    ADD A, emu_SP_offset
    SET PC, POP
emu_PC:
    SET A, SP
    ADD A, emu_PC_offset
    SET PC, POP
emu_EX:
    SET A, SP
    ADD A, emu_EX_offset
    SET PC, POP
emu_deref:
    SET A, <uhhh> ;TODO
    SET PC, POP
emu_literal:
    SET A, SP
    SUB A, 10   ;TODO: proper spot for non-modifiable values
    SET [A], <uhhh> ;TODO
    SET PC, POP
emu_literal_FFFF:
    JSR emu_literal
    SET [A], 0xFFFF
    SET PC, POP
emu_literal_00:
    JSR emu_literal
    SET [A], 0x00
    SET PC, POP
emu_literal_01:
    JSR emu_literal
    SET [A], 0x01
    SET PC, POP
emu_literal_02:
    JSR emu_literal
    SET [A], 0x02
    SET PC, POP
emu_literal_03:
    JSR emu_literal
    SET [A], 0x03
    SET PC, POP
emu_literal_04:
    JSR emu_literal
    SET [A], 0x04
    SET PC, POP
emu_literal_05:
    JSR emu_literal
    SET [A], 0x05
    SET PC, POP
emu_literal_06:
    JSR emu_literal
    SET [A], 0x06
    SET PC, POP
emu_literal_07:
    JSR emu_literal
    SET [A], 0x07
    SET PC, POP
emu_literal_08:
    JSR emu_literal
    SET [A], 0x08
    SET PC, POP
emu_literal_09:
    JSR emu_literal
    SET [A], 0x09
    SET PC, POP
emu_literal_0A:
    JSR emu_literal
    SET [A], 0x0A
    SET PC, POP
emu_literal_0B:
    JSR emu_literal
    SET [A], 0x0B
    SET PC, POP
emu_literal_0C:
    JSR emu_literal
    SET [A], 0x0C
    SET PC, POP
emu_literal_0D:
    JSR emu_literal
    SET [A], 0x0D
    SET PC, POP
emu_literal_0E:
    JSR emu_literal
    SET [A], 0x0E
    SET PC, POP
emu_literal_0F:
    JSR emu_literal
    SET [A], 0x0F
    SET PC, POP
emu_literal_10:
    JSR emu_literal
    SET [A], 0x10
    SET PC, POP
emu_literal_11:
    JSR emu_literal
    SET [A], 0x11
    SET PC, POP
emu_literal_12:
    JSR emu_literal
    SET [A], 0x12
    SET PC, POP
emu_literal_13:
    JSR emu_literal
    SET [A], 0x13
    SET PC, POP
emu_literal_14:
    JSR emu_literal
    SET [A], 0x14
    SET PC, POP
emu_literal_15:
    JSR emu_literal
    SET [A], 0x15
    SET PC, POP
emu_literal_16:
    JSR emu_literal
    SET [A], 0x16
    SET PC, POP
emu_literal_17:
    JSR emu_literal
    SET [A], 0x17
    SET PC, POP
emu_literal_18:
    JSR emu_literal
    SET [A], 0x18
    SET PC, POP
emu_literal_19:
    JSR emu_literal
    SET [A], 0x19
    SET PC, POP
emu_literal_1A:
    JSR emu_literal
    SET [A], 0x1A
    SET PC, POP
emu_literal_1B:
    JSR emu_literal
    SET [A], 0x1B
    SET PC, POP
emu_literal_1C:
    JSR emu_literal
    SET [A], 0x1C
    SET PC, POP
emu_literal_1D:
    JSR emu_literal
    SET [A], 0x1D
    SET PC, POP
emu_literal_1E:
    JSR emu_literal
    SET [A], 0x1E
    SET PC, POP

;Function lookup table
;Functions expect
;   A    - pointer to value of A
;   B    - pointer to value of B
;   I    - pointer to start of child program's data (inclusive)
;   J    - pointer to end of child program's data (inclusive)
;   [SP] - Return address
emu_op_table:
    DAT emu_extended
    DAT emu_SET
    DAT emu_ADD
    DAT emu_SUB
    DAT emu_MUL
    DAT emu_MLI
    DAT emu_DIV
    DAT emu_DVI
    DAT emu_MOD
    DAT emu_MDI
    DAT emu_AND
    DAT emu_BOR
    DAT emu_XOR
    DAT emu_SHR
    DAT emu_ASR
    DAT emu_SHL
    DAT emu_IFB
    DAT emu_IFC
    DAT emu_IFE
    DAT emu_IFN
    DAT emu_IFG
    DAT emu_IFA
    DAT emu_IFL
    DAT emu_IFU
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_ADX
    DAT emu_SBX
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_STI
    DAT emu_STD

emu_NOP:
    SET PC, POP

emu_extended:   ;TODO: handle extended ops
    SET PC, POP

emu_SET:
    IFG I, B    ;check bounds of B to see if it's a data value
        JMP emu_SET_stack
    IFL J, B
        JMP emu_SET_stack
    SET [B], [A]
    SET PC, POP
emu_SET_stack:
    SUB B, SP   ;Check if it's one of our tmp values in the stack
    IFG emu_start_offset, B
        JMP emu_SET_fail
    IFL emu_end_offset, B
        JMP emu_SET_fail
    IFE B, emu_PC_offset
        JMP emu_SET_checkPC
    IFE B, emu_SP_offset
        JMP emu_SET_checkSP
emu_SET_checkStackRet:
    ADD B, SP
    SET [B], [A]
emu_SET_fail:
    JSR illegal_instruction_runtime
    JMP emu_SET_fail

emu_SET_checkSP:
    IFG I, [A]
        JMP emu_SET_fail
    IFL J, [A]
        JMP emu_SET_fail
    JMP emu_SET_checkStackRet
emu_SET_checkPC:
    ;TODO: check code bounds
    ;check for illegal instructions at a, and the 2 words after (or less if near edge of code)
    ;If illegal instructions
        ;JMP illegal_instruction_runtime
    ;TODO: something to let me replace multiple instructions when I can't replace one word instructions
    JMP emu_SET_checkStackRet

emu_ADD:
    SET PUSH, [B]
    ADD PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SUB:
    SET PUSH, [B]
    SUB PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MUL:
    SET PUSH, [B]
    MUL PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MLI:
    SET PUSH, [B]
    MLI PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_DIV:
    SET PUSH, [B]
    DIV PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_DVI:
    SET PUSH, [B]
    DVI PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MOD:
    SET PUSH, [B]
    MOD PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MDI:
    SET PUSH, [B]
    MDI PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_AND:
    SET PUSH, [B]
    AND PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_BOR:
    SET PUSH, [B]
    BOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_XOR:
    SET PUSH, [B]
    XOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SHR:
    SET PUSH, [B]
    SHR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_ASR:
    SET PUSH, [B]
    ASR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SHL:
    SET PUSH, [B]
    XOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_IFB:
    IFC [B], [A]
        ;Move next address forward
    SET PC, POP

emu_IFC:
    IFB [B], [A]
        ;Move next address forward
    SET PC, POP

emu_IFE:
    IFN [B], [A]
        ;Move next address forward
    SET PC, POP

emu_IFN:
    IFE [B], [A]
        ;Move next address forward
    SET PC, POP

emu_IFG:
    IFG [B], [A]
        SET PC, POP
    ;Move next address forward
    SET PC, POP

emu_IFA:
    IFA [B], [A]
        SET PC, POP
    ;Move next address forward
    SET PC, POP

emu_IFL:
    IFL [B], [A]
        SET PC, POP
    ;Move next address forward
    SET PC, POP

emu_IFU:
    IFU [B], [A]
        SET PC, POP
    ;Move next address forward
    SET PC, POP

emu_ADX:
    SET PUSH, [B]
    SET EX, [SP+emu_EX_offset]
    ADX PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SBX:
    SET PUSH, [B]
    SET EX, [SP+emu_EX_offset]
    SBX PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_STI:    ;TODO: consider copying SET for performace
    JSR emu_SET
    ADD [SP+emu_I_offset], 1
    ADD [SP+emu_J_offset], 1
    SET PC, POP

emu_STD:    ;TODO: consider copying SET for performace
    JSR emu_SET
    SUB [SP+emu_I_offset], 1
    SUB [SP+emu_J_offset], 1
    SET PC, POP
