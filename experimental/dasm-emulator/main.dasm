; A dcpu16 program that emulates dcpu16 programs (less memory than exec-untrusted, but slower)
; There is a memory cost, but this program only has to be loaded once, regardless of the number of emulated programs
;
; The emulator assumes the program thinks it is in the same spot of ram that it actually is in. (In other words, programs still need relocated)
; The emulator doesn't care to check ram reads. (ram writes are checked)

init:
    ;This function should be called once, ever (NOT once per program rewritten/loaded)
    SET PC, POP

emulate:
    SET I, [SP+3] ;code_start (inclusive)
    SET J, [SP+2] ;code_end (inclusive)
    
    ;Initialize State
    SET PUSH, 0; IAQ
    SET PUSH, 0; IA
    SET PUSH, [SP+3]; PC
    SET PUSH, 0     ; SP
    SET PUSH, 0     ; EX
    SET PUSH, 0     ; A
    SET PUSH, 0     ; B
    SET PUSH, 0     ; C
    SET PUSH, 0     ; X
    SET PUSH, 0     ; Y
    SET PUSH, 0     ; Z
    SET PUSH, 0     ; I
    SET PUSH, 0     ; J
    .define emu_PC_offset 10
    
    SET B, 0x12 ;HWI
    SET A, SP   ;[J], which is conviently set to 0. (we also know HWI 0 won't modify J)
    JMP [emu_ext_op_table+B]

emu_op_ret:
emu_ext_op_ret:
.define emu_a_ret _a_ret
.define emu_b_ret _b_ret
_loop:
    SET X, [SP+emu_PC_offset]
    ADD [SP+emu_PC_offset], 1
    SET Y, [X+1]
    SET Z, 0
    
    ;Evaluate A
    SET B, 0xFFFF
    SET A, [X]
    SHR A, 10
    AND A, 0x3F
    JSR [emu_operand_table+A]
_a_ret:
    SET A, B
    
    ;Extract B
    SET B, [X]
    SHR B, 5
    AND B, 0x1F
    
    ;Check if we need to read another word(we delay this to try to keep the labels close for XOR/ADD/SUB optimizations)
    IFN Z, 0
        JMP _readword

_readword_ret:
    ;Evaluate B
    
    IFC [X], 0x1F   ;If this is an extended op, don't evaulate B
        JMP [emu_ext_op_table+B] ;Note, this returns execution to emu_ext_op_ret
    
    JSR [emu_operand_table+B]
_b_ret:
    
    IFN Z, 0
        ADD [SP+emu_PC_offset], 1
_emu_op:
    SET X, [X]  ;Read in the op (discarding the instruction)
    AND X, 0x1F
    SET PUSH, _loop
    JMP [emu_op_table+X]

_readword:
    SET Y, [X+2]
    ADD [SP+emu_PC_offset], 1
    SET Z, 0
    JMP _readword_ret

_end:
    ADD SP, 11  ;Throw away State
    SET PC, POP

.define emu_IAQ_offset 13
.define emu_IA_offset 12
.define emu_PC_offset 11
.define emu_SP_offset 10
.define emu_EX_offset 9
.define emu_A_offset 8
.define emu_B_offset 7
.define emu_C_offset 6
.define emu_X_offset 5
.define emu_Y_offset 4
.define emu_Z_offset 3
.define emu_I_offset 2
.define emu_J_offset 1

.define emu_start_offset 1
.define emu_end_offset 13

emu_operand_table:
    DAT emu_reg_A
    DAT emu_reg_B
    DAT emu_reg_C
    DAT emu_reg_X
    DAT emu_reg_Y
    DAT emu_reg_Z
    DAT emu_reg_I
    DAT emu_reg_J
    DAT emu_reg_A_deref
    DAT emu_reg_B_deref
    DAT emu_reg_C_deref
    DAT emu_reg_X_deref
    DAT emu_reg_Y_deref
    DAT emu_reg_Z_deref
    DAT emu_reg_I_deref
    DAT emu_reg_J_deref
    DAT emu_reg_A_offset
    DAT emu_reg_B_offset
    DAT emu_reg_C_offset
    DAT emu_reg_X_offset
    DAT emu_reg_Y_offset
    DAT emu_reg_Z_offset
    DAT emu_reg_I_offset
    DAT emu_reg_J_offset
    DAT emu_PUSHPOP
    DAT emu_PEEK
    DAT emu_PICK
    DAT emu_SP
    DAT emu_PC
    DAT emu_EX
    DAT emu_deref
    DAT emu_literal
    DAT emu_literal_FFFF
    DAT emu_literal_00
    DAT emu_literal_01
    DAT emu_literal_02
    DAT emu_literal_03
    DAT emu_literal_04
    DAT emu_literal_05
    DAT emu_literal_06
    DAT emu_literal_07
    DAT emu_literal_08
    DAT emu_literal_09
    DAT emu_literal_0A
    DAT emu_literal_0B
    DAT emu_literal_0C
    DAT emu_literal_0D
    DAT emu_literal_0E
    DAT emu_literal_0F
    DAT emu_literal_10
    DAT emu_literal_11
    DAT emu_literal_12
    DAT emu_literal_13
    DAT emu_literal_14
    DAT emu_literal_15
    DAT emu_literal_16
    DAT emu_literal_17
    DAT emu_literal_18
    DAT emu_literal_19
    DAT emu_literal_1A
    DAT emu_literal_1B
    DAT emu_literal_1C
    DAT emu_literal_1D
    DAT emu_literal_1E
emu_reg_A:
    SET B, SP
    ADD B, emu_A_offset
    SET PC, POP
emu_reg_B:
    SET B, SP
    ADD B, emu_B_offset
    SET PC, POP
emu_reg_C:
    SET B, SP
    ADD B, emu_C_offset
    SET PC, POP
emu_reg_X:
    SET B, SP
    ADD B, emu_X_offset
    SET PC, POP
emu_reg_Y:
    SET B, SP
    ADD B, emu_Y_offset
    SET PC, POP
emu_reg_Z:
    SET B, SP
    ADD B, emu_Z_offset
    SET PC, POP
emu_reg_I:
    SET B, SP
    ADD B, emu_I_offset
    SET PC, POP
emu_reg_J:
    SET B, SP
    ADD B, emu_J_offset
    SET PC, POP
emu_reg_A_deref:
    SET B, [SP+emu_A_offset]
    SET PC, POP
emu_reg_B_deref:
    SET B, [SP+emu_B_offset]
    SET PC, POP
emu_reg_C_deref:
    SET B, [SP+emu_C_offset]
    SET PC, POP
emu_reg_X_deref:
    SET B, [SP+emu_X_offset]
    SET PC, POP
emu_reg_Y_deref:
    SET B, [SP+emu_Y_offset]
    SET PC, POP
emu_reg_Z_deref:
    SET B, [SP+emu_Z_offset]
    SET PC, POP
emu_reg_I_deref:
    SET B, [SP+emu_I_offset]
    SET PC, POP
emu_reg_J_deref:
    SET B, [SP+emu_J_offset]
    SET PC, POP
emu_reg_A_offset:
    SET B, [SP+emu_A_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_B_offset:
    SET B, [SP+emu_B_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_C_offset:
    SET B, [SP+emu_C_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_X_offset:
    SET B, [SP+emu_X_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_Y_offset:
    SET B, [SP+emu_Y_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_Z_offset:
    SET B, [SP+emu_Z_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_I_offset:
    SET B, [SP+emu_I_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_reg_J_offset:
    SET B, [SP+emu_J_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_PUSHPOP:
    IFE B, 0xFFFF
        JMP emu_POP
emu_PUSH:
    SUB [SP+emu_SP_offset], 1
    SET B, [SP+emu_SP_offset]
    SET PC, POP
emu_POP:
    SET B, [SP+emu_SP_offset]
    ADD [SP+emu_SP_offset], 1
    SET PC, POP
emu_PEEK:
    SET B, [SP+emu_SP_offset]
    SET PC, POP
emu_PICK:
    SET B, [SP+emu_SP_offset]
    ADD B, Y
    SET Z, 1
    SET PC, POP
emu_SP:
    SET B, SP
    ADD B, emu_SP_offset
    SET PC, POP
emu_PC:
    SET B, SP
    ADD B, emu_PC_offset
    SET PC, POP
emu_EX:
    SET B, SP
    ADD B, emu_EX_offset
    SET PC, POP
emu_deref:
    SET B, Y
    SET Z, 1
    SET PC, POP
emu_literal:
    SET Z, SP
    IFE B, 0xFFFF
        SUB Z, 2
    SUB Z, 5
    SET B, Z
    SET [B], Y
    SET Z, 1    ;We could get rid of this if we make assumptions about SP
    SET PC, POP
emu_literal_short:
    SET C, SP
    IFE B, 0xFFFF
        SUB C, 2
    SUB C, 5
    SET B, C
    SET PC, POP
emu_literal_FFFF:
    JSR emu_literal_short
    SET [B], 0xFFFF
    SET PC, POP
emu_literal_00:
    JSR emu_literal_short
    SET [B], 0x00
    SET PC, POP
emu_literal_01:
    JSR emu_literal_short
    SET [B], 0x01
    SET PC, POP
emu_literal_02:
    JSR emu_literal_short
    SET [B], 0x02
    SET PC, POP
emu_literal_03:
    JSR emu_literal_short
    SET [B], 0x03
    SET PC, POP
emu_literal_04:
    JSR emu_literal_short
    SET [B], 0x04
    SET PC, POP
emu_literal_05:
    JSR emu_literal_short
    SET [B], 0x05
    SET PC, POP
emu_literal_06:
    JSR emu_literal_short
    SET [B], 0x06
    SET PC, POP
emu_literal_07:
    JSR emu_literal_short
    SET [B], 0x07
    SET PC, POP
emu_literal_08:
    JSR emu_literal_short
    SET [B], 0x08
    SET PC, POP
emu_literal_09:
    JSR emu_literal_short
    SET [B], 0x09
    SET PC, POP
emu_literal_0A:
    JSR emu_literal_short
    SET [B], 0x0A
    SET PC, POP
emu_literal_0B:
    JSR emu_literal_short
    SET [B], 0x0B
    SET PC, POP
emu_literal_0C:
    JSR emu_literal_short
    SET [B], 0x0C
    SET PC, POP
emu_literal_0D:
    JSR emu_literal_short
    SET [B], 0x0D
    SET PC, POP
emu_literal_0E:
    JSR emu_literal_short
    SET [B], 0x0E
    SET PC, POP
emu_literal_0F:
    JSR emu_literal_short
    SET [B], 0x0F
    SET PC, POP
emu_literal_10:
    JSR emu_literal_short
    SET [B], 0x10
    SET PC, POP
emu_literal_11:
    JSR emu_literal_short
    SET [B], 0x11
    SET PC, POP
emu_literal_12:
    JSR emu_literal_short
    SET [B], 0x12
    SET PC, POP
emu_literal_13:
    JSR emu_literal_short
    SET [B], 0x13
    SET PC, POP
emu_literal_14:
    JSR emu_literal_short
    SET [B], 0x14
    SET PC, POP
emu_literal_15:
    JSR emu_literal_short
    SET [B], 0x15
    SET PC, POP
emu_literal_16:
    JSR emu_literal_short
    SET [B], 0x16
    SET PC, POP
emu_literal_17:
    JSR emu_literal_short
    SET [B], 0x17
    SET PC, POP
emu_literal_18:
    JSR emu_literal_short
    SET [B], 0x18
    SET PC, POP
emu_literal_19:
    JSR emu_literal_short
    SET [B], 0x19
    SET PC, POP
emu_literal_1A:
    JSR emu_literal_short
    SET [B], 0x1A
    SET PC, POP
emu_literal_1B:
    JSR emu_literal_short
    SET [B], 0x1B
    SET PC, POP
emu_literal_1C:
    JSR emu_literal_short
    SET [B], 0x1C
    SET PC, POP
emu_literal_1D:
    JSR emu_literal_short
    SET [B], 0x1D
    SET PC, POP
emu_literal_1E:
    JSR emu_literal_short
    SET [B], 0x1E
    SET PC, POP

;Function lookup table
;Functions expect
;   A    - pointer to value of A
;   B    - pointer to value of B
;   I    - pointer to start of child program's data (inclusive)
;   J    - pointer to end of child program's data (inclusive)
;   [SP] - Return address
emu_op_table:
    DAT emu_extended
    DAT emu_SET
    DAT emu_ADD
    DAT emu_SUB
    DAT emu_MUL
    DAT emu_MLI
    DAT emu_DIV
    DAT emu_DVI
    DAT emu_MOD
    DAT emu_MDI
    DAT emu_AND
    DAT emu_BOR
    DAT emu_XOR
    DAT emu_SHR
    DAT emu_ASR
    DAT emu_SHL
    DAT emu_IFB
    DAT emu_IFC
    DAT emu_IFE
    DAT emu_IFN
    DAT emu_IFG
    DAT emu_IFA
    DAT emu_IFL
    DAT emu_IFU
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_ADX
    DAT emu_SBX
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_STI
    DAT emu_STD

emu_NOP:
    SET PC, POP

emu_extended:   ;Don't call this, call the extend op table directly
    SET PC, POP ;Ex: JSR [emu_ext_op_table+B]

emu_SET:
    IFG I, B    ;check bounds of B to see if it's a data value
        JMP emu_SET_stack
    IFL J, B
        JMP emu_SET_stack
    SET [B], [A]
    SET PC, POP
emu_SET_stack:
    SUB B, SP   ;Check if it's one of our tmp values in the stack
    IFG emu_start_offset, B
        JMP emu_SET_fail
    IFL emu_end_offset, B
        JMP emu_SET_fail
    IFE B, emu_PC_offset
        JMP emu_SET_checkPC
emu_SET_checkStackRet:
    ADD B, SP
    SET [B], [A]
    SET PC, POP
emu_SET_fail:
    JSR illegal_instruction_runtime
    JMP emu_SET_fail

emu_SET_checkPC:
    IFG I, [A]
        JMP emu_SET_fail
    IFL J, [A]
        JMP emu_SET_fail
    JMP emu_SET_checkStackRet

emu_ADD:
    SET PUSH, [B]
    ADD PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SUB:
    SET PUSH, [B]
    SUB PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MUL:
    SET PUSH, [B]
    MUL PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MLI:
    SET PUSH, [B]
    MLI PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_DIV:
    SET PUSH, [B]
    DIV PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_DVI:
    SET PUSH, [B]
    DVI PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MOD:
    SET PUSH, [B]
    MOD PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_MDI:
    SET PUSH, [B]
    MDI PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_AND:
    SET PUSH, [B]
    AND PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_BOR:
    SET PUSH, [B]
    BOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_XOR:
    SET PUSH, [B]
    XOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SHR:
    SET PUSH, [B]
    SHR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_ASR:
    SET PUSH, [B]
    ASR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SHL:
    SET PUSH, [B]
    XOR PEEK, [A]
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_skip:
    SET A, [SP+emu_PC_offset]
    SET PUSH, [SP+emu_SP_offset]
    
_loop:
    SET X, A
    ADD A, 1
    
    SET Z, 0
    SET B, [X]
    SHR B, 10
    AND B, 0x3F
    JSR [emu_operand_table+B]
    IFN Z, 0
        ADD A, 1
    
    SET Z, 0
    SET B, [X]
    SHR B, 5
    AND B, 0x1F
    JSR [emu_operand_table+B]
    IFN Z, 0
        ADD A, 1
    
    SET X, [X]
    AND X, 0x18
    IFE X, 0x18
        JMP _loop   ;Keep on skipping
_end:
    SET [SP+emu_SP_offset], POP ;dcpu16 specs say B is handled after A, so this should be the correct SP+offset
    SET [SP+emu_PC_offset], A
    
    SET PC, POP

emu_IFB:
    IFC [B], [A]
        JMP emu_skip
    SET PC, POP

emu_IFC:
    IFB [B], [A]
        JMP emu_skip
    SET PC, POP

emu_IFE:
    IFN [B], [A]
        JMP emu_skip
    SET PC, POP

emu_IFN:
    IFE [B], [A]
        JMP emu_skip
    SET PC, POP

emu_IFG:
    IFG [B], [A]
        SET PC, POP
    JMP emu_skip

emu_IFA:
    IFA [B], [A]
        SET PC, POP
    JMP emu_skip

emu_IFL:
    IFL [B], [A]
        SET PC, POP
    JMP emu_skip

emu_IFU:
    IFU [B], [A]
        SET PC, POP
    JMP emu_skip

emu_ADX:
    SET PUSH, [B]
    SET EX, [SP+emu_EX_offset]
    ADX PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_SBX:
    SET PUSH, [B]
    SET EX, [SP+emu_EX_offset]
    SBX PEEK, [A]
    SET [SP+emu_EX_offset], EX
    SET A, SP
    SET EX, POP
    JMP emu_SET

emu_STI:    ;TODO: consider copying SET for performace
    JSR emu_SET
    ADD [SP+emu_I_offset], 1
    ADD [SP+emu_J_offset], 1
    SET PC, POP

emu_STD:    ;TODO: consider copying SET for performace
    JSR emu_SET
    SUB [SP+emu_I_offset], 1
    SUB [SP+emu_J_offset], 1
    SET PC, POP

;returns to emu_ext_op_ret, instead of popping PC
;Same ABI as for emu_op_table calls, except that B is not used as an argument
emu_ext_op_table:
    DAT emu_NOP
    DAT emu_JSR
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_INT
    DAT emu_IAG
    DAT emu_IAS
    DAT emu_RFI
    DAT emu_IAQ
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_HWN
    DAT emu_HWQ
    DAT emu_HWI
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP
    DAT emu_NOP

emu_JSR:
    ;SET PUSH, (next) PC
    SET C, A
    JSR emu_PUSH
    SET A, SP
    ADD A, emu_PC_offset-1
    JSR emu_SET
    
    ;SET PC, <a>
    SET A, C
    SET B, emu_PC_offset
    
    SET PUSH, emu_ext_op_ret
    JMP emu_SET_checkPC

emu_INT:
    IFE [SP+emu_IA_offset-1], 0 ;If IA == 0, return
        JMP emu_ext_op_ret
    SET C, A
    SET [SP+emu_IAQ_offset-1], 1 ;IAQ 1
    
    ;SET PUSH, PC
    SET A, SP
    ADD A, emu_PC_offset-1
    JSR emu_PUSH
    JSR emu_SET
    
    ;SET PUSH, A
    SUB A, (emu_PC_offset-emu_A_offset)
    JSR emu_PUSH
    JSR emu_SET
    
    SET [A], [C] ;SET A, <msg>
    SET [SP+emu_PC_offset-1], [SP+emu_IA_offset-1]  ;SET PC, IA
    JMP emu_ext_op_ret

emu_IAS:
    IFG I, [A]    ;check bounds of potential IA
        JMP _illegal
    IFL J, [A]
        JMP _illegal
    SET [SP+emu_IA_offset-1], [A]  ;SET IA, <a>
    JMP emu_ext_op_ret
_illegal:
    SET [SP+emu_IA_offset-1], 0
    JMP emu_ext_op_ret

emu_IAG:
    ;SET <a>, IA
    SET B, A
    SET A, SP
    ADD A, emu_IA_offset-1
    
    SET PUSH, emu_ext_op_ret
    JMP emu_SET

emu_RFI:
    SET [SP+emu_IAQ_offset-1], 0 ;IAQ 0
    
    ;SET A, POP
    JSR emu_POP
    SET [SP+emu_A_offset], [B]
    
    ;SET PC, POP
    JSR emu_POP
    SET A, B
    SET B, emu_PC_offset
    
    SET PUSH, emu_ext_op_ret
    JMP emu_SET_checkPC

emu_IAQ:
    SET [SP+emu_IAQ_offset-1], [A]
    JMP emu_ext_op_ret

;TODO: Use emulated/safe hardware devices instead of just passing the hw api as is
emu_HWN:
    HWN [A]
    JMP emu_ext_op_ret
emu_HWQ:
    HWQ [A]
    SET [SP+emu_A_offset-1], A
    SET [SP+emu_B_offset-1], B
    SET [SP+emu_C_offset-1], C
    SET [SP+emu_X_offset-1], X
    SET [SP+emu_Y_offset-1], Y
    JMP emu_ext_op_ret
emu_HWI:
    IFE [A], 0
        JMP emu_ext_op_ret  ;No. We're not going to just reboot the machine for you.
    SET PUSH, I
    SET PUSH, J
    SET PUSH, [A]
    SET A, [SP+emu_A_offset+2]
    SET B, [SP+emu_B_offset+2]
    SET C, [SP+emu_C_offset+2]
    SET X, [SP+emu_X_offset+2]
    SET Y, [SP+emu_Y_offset+2]
    SET Z, [SP+emu_Z_offset+2]
    SET I, [SP+emu_I_offset+2]
    SET J, [SP+emu_J_offset+2]
    SET EX, [SP+emu_EX_offset+2]
    HWI PEEK
    SET [SP+emu_EX_offset+2], EX
    SET [SP+emu_J_offset+2], J
    SET [SP+emu_I_offset+2], I
    SET [SP+emu_Z_offset+2], Z
    SET [SP+emu_Y_offset+2], Y
    SET [SP+emu_X_offset+2], X
    SET [SP+emu_C_offset+2], C
    SET [SP+emu_B_offset+2], B
    SET [SP+emu_A_offset+2], A
    SET A, POP
    SET J, POP
    SET I, POP
    JMP emu_ext_op_ret
    
illegal_instruction_runtime:    ;TODO: don't just create a screen in some random spot of memory
    SET C, B        ;Recover address before things get too complicated
    ADD C, SP
    ADD C, 1
    SET PUSH, C     ;Address we tried to write to
    SET PUSH, [A]     ;Value we attempted to write
    SET PUSH, I ;Save program bounds
    SET PUSH, J
    
    ;starting at SP+4, search for some PC values that could only be from the emulation loop, and use it as a base pointer to find the emulated PC
    SET I, SP
    ADD I, 4
    SET J, 0
    SET PUSH, [SP]  ;This should result in an value outside of the program bounds, and therefore a safe value to use for our own purposes
    ADD PEEK, 1     ;In this case, this represents a failure to find the emulated PC register
_BP_loop:
    SET A, [I]
    IFE [I], emu_op_ret
        JMP _BP_end
    IFE [I], emu_ext_op_ret
        JMP _BP_end
    IFE [I], emu_a_ret
        JMP _BP_end
    IFE [I], emu_b_ret
        JMP _BP_end
    STI A, A
    IFG J, 2    ;If we tried more than 3 values, we failed to find it
        JMP _BP_fail
    JMP _BP_loop
_BP_end:
    SET PEEK, [I+emu_PC_offset]
_BP_fail:
    JSR clr_screen  ;Clear screen
    
    ;Print standard panic message
    SET I, 0x8000
    SET J, illegal_op_msg
    JSR copy_str
    
    ;Print more descriptive message if possible
    SET I, 0x8000+(32*1)
    SET J, illegal_SET_PC_msg
    IFE B, emu_PC_offset
        JSR copy_str
    
    SET A, [SP+1]
    ADD A, 1
    IFE A, [SP]
        JMP _noPC
    ;Print PC we where at or around
    SET I, 0x8000+(32*2)    ;TODO: Fix the assembler bug that occurs when the parentheses are removed
    SET J, illegal_PC_msg
    JSR copy_str
    SET Y, I
    SET J, [SP]
    JSR printHex
_noPC:
    
    ;Print address we tried to write to
    SET I, 0x8000+(32*3)    ;TODO: Fix the assembler bug that occurs when the parentheses are removed
    SET J, illegal_address_msg
    JSR copy_str
    SET Y, I
    SET J, [SP+4]
    JSR printHex
    
    ;Print value we tried to write
    SET I, 0x8000+(32*4)
    SET J, illegal_value_msg
    JSR copy_str
    SET Y, I
    SET J, [SP+3]
    JSR printHex
    
    ;Print lower limit
    SET I, 0x8000+(32*5)
    SET J, illegal_bounds_start_msg
    JSR copy_str
    SET Y, I
    SET J, [SP+2]
    JSR printHex
    
    ;Print upper limit
    SET I, 0x8000+(32*6)
    SET J, illegal_bounds_end_msg
    JSR copy_str
    SET Y, I
    SET J, [SP+1]
    JSR printHex    ;(it also shouldn't have an offset, but I need to find and fix this bug first)
    
    ;TODO: don't do this either, we shouldn't be taking over the computer from the OS
    ;Find monitors and awaken them
    HWN Z
_loop:
    IFE Z, 0
        JMP _end
    SUB Z, 1
    HWQ Z
    IFE A, 0xF615
        IFE B, 0x7349
            IFE C, 0x1802
                JMP _found
    JMP _loop
_found:
    SET A, 0        ;Map screen
    SET B, 0x8000
    HWI Z
    
    SET A, 1        ;Use default font
    SET B, 0
    HWI Z
    
    SET A, 2        ;Use default palette
    SET B, 0
    HWI Z
    
    JMP _loop

_end:
    ;TODO: Kill the child program.
    SUB PC, 1

clr_screen:
            SET I, 0
_loop:
            STI [0x8000+I], 0
            IFN I, 32*12
                JMP _loop
            SET PC, POP

;I -- dest
;J -- src (expected to be null terminated and of length 1 or greater)
copy_str:
    STI [I], [J]
    IFN [J], 0
        JMP copy_str
    SET PC, POP

;J - number
;Y - dest
printHex:
            SET I, 0
            ADD Y, 3
printHex_loop:
            SET A, J
            JSR printHexChar
            SHR J, 4
            ADD I, 1
            IFL I, 4
                JMP printHex_loop
            ADD Y, 5
            SET [Y], 0
            ADD Y, 1
            SET PC, POP
printHexChar:
            AND A, 0xF
            IFG A, 9
                ADD A, 0x07
            ADD A, 0x30|0xF000
            SET [Y], A
            SUB Y, 1
            SET PC, POP

illegal_op_msg:
    DAT "ILLEGAL OPERATION DETECTED"|0xF000, 0
illegal_SET_PC_msg:
    DAT "Child attempted to change PC"|0xF000, 0
illegal_address_msg:
    DAT "Illegal Address: 0x"|0xF000, 0
illegal_value_msg:
    DAT "New Value: 0x"|0xF000, 0
illegal_bounds_start_msg:
    DAT "Lower Limit: 0x"|0xF000, 0
illegal_bounds_end_msg:
    DAT "Upper Limit: 0x"|0xF000, 0
illegal_PC_msg:
    DAT "PC: ~0x"|0xF000, 0